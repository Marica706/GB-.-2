import numpy as np
from math import pi
import numpy as np
from math import pi
Задача 1
# равномерное распределение
a = np.linspace(200,800,100)
# M(X) = (a+b)/2
(200+800)/2
500
# D(X)
(800-200)**2/12
30000
# среднее квадратичное отклонение
math.sqrt(30000)
173.20508075688772
a.std()
174.94587907710374
Задача 2
(-2.15)
# правая граница D(X)=(b-a)^2/12       
# известны D(X) и а, преобразуем квадратное уравнение
# b^2 - b - 2.15 = 0
b1 = (-1 + math.sqrt(1-4*(-2.15)))/2
b2 = (-1 - math.sqrt(1-4*(-2.15)))/2        # отбрасываем это значение, так как b2<0
b1
1.0491933384829668
# среднее значение M(X) = (a+b)/2
(0.5+1.05)/2
0.775
Задача 3
(1 / (4 * math.sqrt(2*pi))) * (math.exp(-(x+2)**2) / 32)
X =[] 
for x in np.arange(100):
    X= X+[(1 / (4 * math.sqrt(2*pi))) * (math.exp(-(x+2)**2) / 32)]
    
X = np.array(X)
 
# M(X)
a = - 2
s = 16
# D(X)
s = 16
Задача 4
def f_x (x): 
    return (1 / (4 * math.sqrt(8*pi))) * (math.exp(-(x-174)**2 / 128))
f_x(182)
7.135627680938258e-06
